#include<iostream>
#include<vector>
#include<chrono>

using namespace std;
using namespace std::chrono;

bool sqrt(int num) {

    int min = 1;
    int max = num;

    while (min <= max) {

        int mid = (min + max)/2;

        if (mid * mid == num) {

            return true;

        }

        if (mid * mid < num) {

            min = mid + 1;

        }

        else {

            max = mid - 1;

        }

    }

    return false;
}

int main() {

    int numLockers;

    cout << "Enter the number of lockers: ";
    cin >> numLockers;
    cout << endl;

    auto start = high_resolution_clock::now();

    vector<int> lockers(numLockers, 0); //0 represents a closed locker

    for (int i = 1; i < numLockers + 1; i++) {

        if (sqrt(i)) {

            if (lockers.at(i - 1) == 0) {

                lockers.at(i - 1) = 1;

            }
            
            else if (lockers.at(i - 1) == 1) {

                lockers.at(i - 1) = 0;

            }
        }
    }

    for (int i = 0; i < numLockers; i++) {

        cout << lockers.at(i) << " ";

    }

    auto stop = high_resolution_clock::now();

    auto duration = duration_cast<microseconds>(stop - start);

    cout << endl;

    cout << duration.count() << " microseconds" << endl;


}
